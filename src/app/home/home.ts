import { Component, Inject, PLATFORM_ID, afterNextRender, ChangeDetectorRef, signal } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './home.html',
  styleUrl: './home.css'
})
export class Home {
  // Usar signals para mejor reactividad con zoneless change detection
  notificationPermission = signal<string>('default');
  notificationSupported = signal<boolean>(false);
  private isBrowser: boolean = false;

  constructor(
    @Inject(PLATFORM_ID) private platformId: Object,
    private cdr: ChangeDetectorRef
  ) {
    // Verificar si estamos en el navegador
    this.isBrowser = isPlatformBrowser(this.platformId);
    
    // Usar afterNextRender para c√≥digo del navegador en Angular 20
    if (this.isBrowser) {
      afterNextRender(() => {
        this.initializeNotifications();
      });
    }
  }

  /**
   * Inicializa el soporte de notificaciones
   */
  private initializeNotifications(): void {
    if (!this.isBrowser) {
      return;
    }
    
    // Verificar soporte de notificaciones
    if ('Notification' in window) {
      this.notificationSupported.set(true);
      // Usar window.Notification para evitar problemas de tipos
      this.notificationPermission.set((window as any).Notification.permission);
      console.log('üì¢ Notificaciones soportadas. Permiso actual:', this.notificationPermission());
    } else {
      this.notificationSupported.set(false);
      console.warn('‚ùå Este navegador no soporta notificaciones');
    }
    
    // Forzar detecci√≥n de cambios despu√©s de inicializar
    this.cdr.detectChanges();
  }

  /**
   * Solicita permiso al usuario para mostrar notificaciones
   */
  async requestNotificationPermission(): Promise<void> {
    console.log('üîî Solicitando permiso para notificaciones...');
    
    // Verificaciones de seguridad
    if (!this.isBrowser) {
      console.error('‚ùå No estamos en el navegador');
      return;
    }

    if (!this.notificationSupported()) {
      alert('Tu navegador no soporta notificaciones de escritorio');
      return;
    }

    try {
      // Usar window.Notification para evitar problemas de tipos
      const NotificationAPI = (window as any).Notification;
      const permission = await NotificationAPI.requestPermission();
      this.notificationPermission.set(permission);
      
      console.log('üì¢ Permiso obtenido:', permission);
      
      // Forzar detecci√≥n de cambios
      this.cdr.detectChanges();
      
      if (permission === 'granted') {
        console.log('‚úÖ Permisos concedidos, mostrando notificaci√≥n de √©xito');
        // Mostrar notificaci√≥n de √©xito
        this.showSuccessNotification();
      } else if (permission === 'denied') {
        alert('Has denegado el permiso para las notificaciones. Para habilitarlas, debes cambiar la configuraci√≥n del navegador.');
      }
    } catch (error) {
      console.error('‚ùå Error al solicitar permiso:', error);
      alert('Error al solicitar permiso de notificaciones');
    }
  }

  /**
   * Muestra una notificaci√≥n de prueba con mejor debugging
   */
  showTestNotification(): void {
    console.log('üöÄ Intentando mostrar notificaci√≥n de prueba...');
    console.log('üìç Estado actual:', {
      isBrowser: this.isBrowser,
      supported: this.notificationSupported(),
      permission: this.notificationPermission()
    });

    // Verificaciones de seguridad
    if (!this.isBrowser) {
      console.error('‚ùå No estamos en el navegador');
      return;
    }

    if (!this.notificationSupported()) {
      alert('Tu navegador no soporta notificaciones');
      return;
    }

    if (this.notificationPermission() === 'granted') {
      console.log('‚úÖ Permisos OK, creando notificaci√≥n...');
      
      try {
        // M√©todo 1: Usar la API Notification directamente
        const NotificationAPI = (window as any).Notification;
        
        // Crear la notificaci√≥n con opciones m√≠nimas primero
        const notification = new NotificationAPI('üéâ ¬°Notificaci√≥n de Prueba!', {
          body: 'Esta es una notificaci√≥n de prueba desde tu aplicaci√≥n Angular PWA',
          tag: 'test-notification-' + Date.now(), // Tag √∫nico para evitar duplicados
        });

        console.log('‚úÖ Notificaci√≥n creada:', notification);

        // Agregar event listeners
        notification.onclick = () => {
          console.log('üëÜ Click en la notificaci√≥n');
          window.focus();
          notification.close();
        };

        notification.onshow = () => {
          console.log('üëÅÔ∏è Notificaci√≥n mostrada');
        };

        notification.onerror = (error: any) => {
          console.error('‚ùå Error en la notificaci√≥n:', error);
          alert('Error al mostrar la notificaci√≥n. Revisa la consola para m√°s detalles.');
        };

        notification.onclose = () => {
          console.log('üîí Notificaci√≥n cerrada');
        };
        
        // M√©todo 2: Si el m√©todo 1 no funciona, intentar con Service Worker
        // (solo si hay un Service Worker registrado)
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.ready.then((registration) => {
            console.log('üîß Service Worker listo, intentando notificaci√≥n alternativa...');
            
            registration.showNotification('üéâ ¬°Notificaci√≥n de Prueba (SW)!', {
              body: 'Esta notificaci√≥n viene del Service Worker',
              icon: '/favicon.ico',
              badge: '/favicon.ico',
              tag: 'sw-test-' + Date.now(),
              requireInteraction: false
            }).then(() => {
              console.log('‚úÖ Notificaci√≥n del Service Worker mostrada');
            }).catch((swError) => {
              console.error('‚ùå Error con Service Worker:', swError);
            });
          }).catch((swReadyError) => {
            console.log('‚ö†Ô∏è Service Worker no disponible:', swReadyError);
          });
        }
        
      } catch (error) {
        console.error('‚ùå Error al crear notificaci√≥n:', error);
        alert('Error al crear la notificaci√≥n: ' + error);
        
        // Intentar con un alert como fallback para verificar que el c√≥digo se ejecuta
        setTimeout(() => {
          alert('Si ves este mensaje, el c√≥digo se ejecuta pero las notificaciones no funcionan. Verifica:\n\n' +
                '1. Que no tengas el modo "No molestar" activado\n' +
                '2. Que las notificaciones del sistema est√©n habilitadas\n' +
                '3. Que el navegador no est√© minimizado\n' +
                '4. Revisa la consola para m√°s informaci√≥n');
        }, 100);
      }
    } else if (this.notificationPermission() === 'denied') {
      console.warn('‚õî Notificaciones bloqueadas');
      alert('‚õî Las notificaciones est√°n bloqueadas. Por favor, habil√≠talas en la configuraci√≥n del navegador.');
    } else {
      console.warn('‚ö†Ô∏è Permisos no otorgados a√∫n');
      alert('‚ö†Ô∏è Primero debes permitir las notificaciones haciendo clic en el bot√≥n "Permitir notificaciones"');
    }
  }

  /**
   * Muestra una notificaci√≥n de √©xito
   */
  private showSuccessNotification(): void {
    if (!this.isBrowser || this.notificationPermission() !== 'granted') {
      return;
    }
    
    console.log('üéä Mostrando notificaci√≥n de √©xito...');
    
    try {
      const NotificationAPI = (window as any).Notification;
      const notification = new NotificationAPI('‚úÖ ¬°√âxito!', {
        body: '¬°Las notificaciones han sido habilitadas correctamente!',
        tag: 'success-' + Date.now()
      });
      
      notification.onshow = () => {
        console.log('‚úÖ Notificaci√≥n de √©xito mostrada');
      };
      
    } catch (error) {
      console.error('‚ùå Error al mostrar notificaci√≥n de √©xito:', error);
    }
  }

  /**
   * Verifica si las notificaciones est√°n habilitadas
   */
  get notificationsEnabled(): boolean {
    return this.notificationPermission() === 'granted';
  }

  /**
   * Verifica si las notificaciones est√°n bloqueadas
   */
  get notificationsBlocked(): boolean {
    return this.notificationPermission() === 'denied';
  }
}